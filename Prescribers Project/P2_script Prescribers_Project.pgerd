-- For this exericse, you'll be working with a database derived from the Medicare 
-- Part D Prescriber Public Use File. 
-- More information about the data is contained in the Methodology PDF file. 
-- See also the included entity-relationship diagram.

-- 1. a. Which prescriber had the highest total number of claims (totaled over all drugs)? Report the npi and the total 
-- number of claims.

SELECT npi, SUM(total_claim_count) AS claim_count
FROM prescriber
INNER JOIN prescription
USING(npi)
GROUP BY npi
ORDER BY SUM(total_claim_count) DESC
LIMIT 1;

--1881634483

-- b. Repeat the above, but this time report the nppes_provider_first_name, nppes_provider_last_org_name, 
-- specialty_description, and the total number of claims.
WITH prescriber_prescription AS			
								(SELECT *
								FROM prescriber
								INNER JOIN prescription
								USING(npi)
								)
SELECT nppes_provider_first_name,
		nppes_provider_last_org_name, 
		specialty_description, 
		SUM(total_claim_count)
FROM prescriber_prescription
GROUP BY nppes_provider_first_name, 
		nppes_provider_last_org_name, 
		specialty_description
ORDER BY SUM(total_claim_count) DESC
LIMIT 1;

-- 2. a. Which specialty had the most total number of claims (totaled over all drugs)?
WITH prescriber_prescription AS			
								(SELECT *
								FROM prescriber
								INNER JOIN prescription
								USING(npi)
								)
SELECT specialty_description, SUM(total_claim_count)
FROM prescriber_prescription
GROUP BY specialty_description
ORDER BY SUM(total_claim_count) DESC
LIMIT 1;

-- Family Practice

-- b. Which specialty had the most total number of claims for opioids?

WITH prescriber_prescription_drug AS			
								(SELECT *
								FROM prescription
								INNER JOIN prescriber
								USING(npi)
								INNER JOIN drug
								USING(drug_name)
								)
SELECT specialty_description, SUM(total_claim_count)
FROM prescriber_prescription_drug
WHERE opioid_drug_flag = 'Y'
GROUP BY specialty_description
ORDER BY SUM(total_claim_count) DESC
LIMIT 1;

-- Nurse Practitioners


-- c. Challenge Question: Are there any specialties that appear in the prescriber 
-- table that have no associated prescriptions in the prescription table?

SELECT specialty_description
FROM prescriber
GROUP BY specialty_description
EXCEPT
SELECT specialty_description
FROM prescriber
INNER JOIN prescription
USING(npi)
GROUP BY specialty_description;

--Jacob
select specialty_description
from prescriber
except
select specialty_description
from prescriber as p1
join prescription as p2
using(npi)
join drug as d
on p2.drug_name = d.drug_name;

-- AVA
SELECT specialty_description
FROM prescription
FULL JOIN prescriber
USING (npi)
WHERE total_claim_count IS NULL
GROUP BY specialty_description;
-- d. Difficult Bonus: Do not attempt until you have solved all other problems! 
-- For each specialty, report the percentage of total claims by that specialty which are for opioids. 
-- Which specialties have a high percentage of opioids?

SELECT specialty_description 
FROM prescriber
GROUP BY specialty_description;

SELECT drug_name, SUM(total_claim_count) AS total_claims
FROM prescription
GROUP BY drug_name;

SELECT drug_name
FROM drug


SELECT specialty_description, 
		ROUND(SUM(CASE 
			WHEN opioid_drug_flag = 'Y' 
			THEN total_claim_count ELSE 0 END) * 100.0 / SUM(total_claim_count), 2) 
		    AS opioid_percentage
FROM prescriber
INNER JOIN prescription
USING(npi)
INNER JOIN drug
USING(drug_name)
GROUP BY specialty_description
ORDER BY opioid_percentage DESC;

--CHAT GPT
SELECT 
    p.specialty_description, 
    SUM(pr.total_claim_count) AS total_claims, 
    SUM(CASE WHEN d.opioid_drug_flag = 'Y' THEN pr.total_claim_count ELSE 0 END) AS opioid_claims,
    (SUM(CASE WHEN d.opioid_drug_flag = 'Y' THEN pr.total_claim_count ELSE 0 END) * 100.0 / SUM(pr.total_claim_count)) AS opioid_percentage
FROM prescriber p
INNER JOIN prescription pr USING(npi)
INNER JOIN drug d USING(drug_name)
GROUP BY p.specialty_description
ORDER BY opioid_percentage DESC;

SELECT drug_name,
CASE
	WHEN opioid_drug_flag = 'Y' THEN 1
	WHEN opioid_drug_flag = 'N' THEN 0
END count_if_opioid
FROM drug

--AVA
WITH opioids AS (
	SELECT drug_name
	FROM drug
	WHERE opioid_drug_flag = 'Y'
	)
SELECT specialty_description,
	ROUND((COUNT(opioids.drug_name)/SUM(total_claim_count)*100), 2) AS opioid_percent
FROM prescriber
JOIN prescription
USING (npi)
JOIN opioids
USING (drug_name)
GROUP BY specialty_description
ORDER BY opioid_percent DESC;

-- 3. a. Which drug (generic_name) had the highest total drug cost?
SELECT generic_name, MAX(total_drug_cost)
FROM drug
LEFT JOIN prescription
USING(drug_name)
GROUP BY generic_name
ORDER BY MAX(total_drug_cost) DESC NULLS LAST
LIMIT 1;

--PIRFENIDONE

-- b. Which drug (generic_name) has the hightest total cost per day? 
-- Bonus: Round your cost per day column to 2 decimal places. Google ROUND to see how this works.

SELECT generic_name, ROUND(MAX(total_drug_cost/total_day_supply),2) AS total_cost_per_day
FROM drug
INNER JOIN prescription
USING(drug_name)
GROUP BY generic_name
ORDER BY total_cost_per_day DESC;

-- 4. a. For each drug in the drug table, return the drug name and then a 
-- column named 'drug_type' which says 'opioid' for drugs which have 
-- opioid_drug_flag = 'Y', says 'antibiotic' for those drugs which have 
-- antibiotic_drug_flag = 'Y', and says 'neither' for all other drugs. 
-- Hint: You may want to use a CASE expression for this. See 
-- https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-case/

SELECT drug_name,
		CASE WHEN opioid_drug_flag = 'Y' THEN 'opioid'
			WHEN antibiotic_drug_flag = 'Y' THEN 'antibiotic'
			ELSE 'Neither'
		END drug_type
FROM drug;

-- b. Building off of the query you wrote for part a, determine 
-- whether more was spent (total_drug_cost) on opioids or on 
-- antibiotics. Hint: Format the total costs as MONEY for easier comparision.

SELECT CASE WHEN opioid_drug_flag = 'Y' THEN 'opioid'
			WHEN antibiotic_drug_flag = 'Y' THEN 'antibiotic'
			ELSE 'Neither'
		END drug_type,
		SUM(total_drug_cost) AS MONEY
FROM drug
INNER JOIN prescription
USING (drug_name)
GROUP BY drug_type
ORDER BY money DESC;

-- opioid

-- 5. a. How many CBSAs are in Tennessee? Warning: The cbsa table contains 
-- information for all states, not just Tennessee.

SELECT count(cbsa)
FROM cbsa
LEFT JOIN fips_county
USING (fipscounty)
WHERE state = 'TN';

-- b. Which cbsa has the largest combined population? Which has the 
-- smallest? Report the CBSA name and total population.


SELECT cbsa, SUM(population)
FROM cbsa
INNER JOIN population
USING (fipscounty)
GROUP BY cbsa
ORDER BY SUM(population) DESC NULLS LAST
LIMIT 1;

-- c. What is the largest (in terms of population) county which is 
-- not included in a CBSA? Report the county name and population.
SELECT county, population
FROM population
INNER JOIN fips_county
USING(fipscounty)
EXCEPT
SELECT county, population
FROM cbsa
INNER JOIN population
USING (fipscounty)
INNER JOIN fips_county
USING(fipscounty)
ORDER BY population DESC
LIMIT 1;
-- 6. a. Find all rows in the prescription table where total_claims is 
-- at least 3000. Report the drug_name and the total_claim_count.

SELECT drug_name, total_claim_count
FROM prescription
WHERE total_claim_count >= 3000;

-- b. For each instance that you found in part a, add a column that 
-- indicates whether the drug is an opioid.

WITH drugs_total_claim_over_3000 AS (
									SELECT drug_name, total_claim_count
									FROM prescription
									WHERE total_claim_count >= 3000)
SELECT drug_name, total_claim_count,
		CASE
		WHEN opioid_drug_flag = 'Y' THEN 'opioid'
		ELSE 'not opioid'
	END opioid_check
FROM drugs_total_claim_over_3000
INNER JOIN drug
USING(drug_name);

-- c. Add another column to you answer from the previous part which 
-- gives the prescriber first and last name associated with each row.

WITH everything AS 
				(WITH drugs_total_claim_over_3000 AS (
														SELECT drug_name, total_claim_count
														FROM prescription
														WHERE total_claim_count >= 3000)
					SELECT drug_name, total_claim_count,
							CASE
							WHEN opioid_drug_flag = 'Y' THEN 'opioid'
							ELSE 'not opioid'
						END opioid_check
					FROM drugs_total_claim_over_3000
					INNER JOIN drug
					USING(drug_name))
SELECT drug_name, total_claim_count, opioid_check
FROM everything;

-- 7. The goal of this exercise is to generate a full list of all pain 
-- management specialists in Nashville and the number of claims they had 
-- for each opioid. Hint: The results from all 3 parts will have 637 rows.

-- a. First, create a list of all npi/drug_name combinations for pain
-- management specialists (specialty_description = 'Pain Management) 
-- in the city of Nashville (nppes_provider_city = 'NASHVILLE'), where 
-- the drug is an opioid (opiod_drug_flag = 'Y'). Warning: Double-check your 
-- query before running it. You will only need to use the prescriber and drug 
-- tables since you don't need the claims numbers yet.

SELECT npi, drug_name
FROM prescriber
CROSS JOIN drug
WHERE specialty_description = 'Pain Management'
		AND nppes_provider_city = 'NASHVILLE'
		AND opioid_drug_flag = 'Y';


-- b. Next, report the number of claims per drug per prescriber. Be sure to 
-- include all combinations, whether or not the prescriber had any claims. 
-- You should report the npi, the drug name, and the number of claims (total_claim_count).

WITH npi_drug_combo AS(
					SELECT npi, drug_name
					FROM prescriber
					CROSS JOIN drug
					WHERE specialty_description = 'Pain Management'
							AND nppes_provider_city = 'NASHVILLE'
							AND opioid_drug_flag = 'Y')
SELECT npi, npi_drug_combo.drug_name, total_claim_count 
FROM npi_drug_combo
LEFT JOIN prescription
USING(npi, drug_name);

-- c. Finally, if you have not done so already, fill in any missing values 
-- for total_claim_count with 0. Hint - Google the COALESCE function.

WITH npi_drug_combo AS(
					SELECT npi, drug_name
					FROM prescriber
					CROSS JOIN drug
					WHERE specialty_description = 'Pain Management'
							AND nppes_provider_city = 'NASHVILLE'
							AND opioid_drug_flag = 'Y')
SELECT npi, 
		npi_drug_combo.drug_name, 
		COALESCE(total_claim_count, 0) AS total_claims
FROM npi_drug_combo
LEFT JOIN prescription
USING(npi, drug_name);